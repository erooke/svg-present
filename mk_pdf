#! /usr/bin/env python
import os
from typing import Iterator
from pathlib import Path
from argparse import ArgumentParser
from multiprocessing import Pool
from subprocess import run, DEVNULL
from tempfile import TemporaryDirectory
from xml.etree import ElementTree


def main():
    """
    Renders a pdf slideshow from a single svg.
    This process happens in three steps:
        0. Parse user input
        1. Split the svg into one svg file per slide
        2. Use inkscape to render each of these svgs to pdfs
        3. Combine each pdf into one master pdf
    """
    parser = ArgumentParser(
        description="A python script to create slides using inkscape"
    )

    parser.add_argument("files", metavar="file", nargs="+", help="Inkscape file to use")

    parser.add_argument(
        "-o",
        "--output",
        metavar="file",
        help="Output for the slideshow",
        nargs="?",
        default="talk.pdf",
    )

    parser.add_argument(
        "-j",
        "--threads",
        metavar="num",
        help="How many inkscape processess to spawn",
        nargs="?",
        type=int,
        default=None,
    )

    args = parser.parse_args()

    presentation = Tree()

    for file in args.files:
        try:
            sub_presentation = load_presentation(file)
            presentation.children.append(sub_presentation)
        except IsADirectoryError:
            for svg in find_svgs(file):
                presentation.children.append(load_presentation(svg))

    dir = TemporaryDirectory()

    merge_cmd = [
        "/usr/bin/gs",
        "-dBATCH",
        "-dNOPAUSE",
        "-q",
        "-sDEVICE=pdfwrite",
        "-sOutputFile=" + args.output,
    ]

    count = 0

    pool = Pool(args.threads)

    # Split the slides, start the rendering pool
    print("\r  Splitting Slides", end="")
    while next(presentation):
        svg = dir.name + "/" + str(count) + ".svg"
        pdf = dir.name + "/" + str(count) + ".pdf"
        merge_cmd.append(pdf)
        presentation.children[presentation.index].tree.write(svg)
        pool.apply_async(
            run, (["/usr/bin/inkscape", "-o", pdf, svg],), dict(stderr=DEVNULL)
        )
        count += 1
    print("\r✓ Splitting Slides")

    print("  Rendering Slides", end="")
    pool.close()
    pool.join()
    print("\r✓ Rendering Slides")

    # Merge each of the pdfs into one pdf
    print("  Merging slides", end="")
    run(merge_cmd)
    print("\r✓ Merging slides")


def inkscape(name):
    """Add the inkscape namespace to a name"""
    return "{http://www.inkscape.org/namespaces/inkscape}" + name


class Tree:
    def __init__(self, element=None):
        self.children = []
        self.element = element
        self.index = None


def next(tree):
    """Move to the next slide"""
    if tree.index is None:
        # Initial setup
        tree.index = 0

        if tree.element is not None:
            tree.element.set("style", "display:inline")

        if tree.children:
            next(tree.children[0])

        return True

    try:
        if not next(tree.children[tree.index]):
            tree.index += 1
            next(tree.children[tree.index])

    except IndexError:
        # If at any point we run out of children there is no next element
        if tree.element:
            tree.element.set("style", "display:none")
        return False

    return True


def layer(element):
    if element.get(inkscape("groupmode")) != "layer":
        return None

    label = element.get(inkscape("label"))

    if label[0] == "(" and label[-1] == ")":
        return None

    element.set("style", "display:none")
    tree = Tree(element)

    for child in element:
        maybe_tree = layer(child)
        if maybe_tree:
            tree.children.append(maybe_tree)

    return tree


def load_presentation(file):
    """Load a presentation from an svg file on disk"""
    tree = ElementTree.parse(file)
    root = tree.getroot()
    slides = Tree()
    slides.tree = tree
    for child in root:
        maybe_slides = layer(child)
        if maybe_slides is not None:
            slides.children.append(maybe_slides)

    return slides


def find_svgs(directory: str) -> Iterator[Path]:
    for dirname, dirs, files in os.walk(directory):
        # This ensures the directories are traveresed in a sensible order
        dirs.sort()
        files.sort()
        for file in files:
            if not file.endswith(".svg"):
                continue
            yield Path(dirname) / file


if __name__ == "__main__":
    main()
